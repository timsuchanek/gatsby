{"version":3,"sources":["../../src/utils/cache.js"],"names":["Promise","require","low","fs","db","exports","initCache","ensureDirSync","process","cwd","directory","env","NODE_ENV","tmpdir","storage","format","serialize","obj","deserialize","JSON","parse","str","_","mixin","defaults","keys","write","get","resolve","reject","pair","getById","key","value","e","set","upsert","id"],"mappings":";;;;;;;;AAAA,IAAMA,UAAUC,mBAAhB;AACA,IAAMC,MAAMD,gBAAZ;AACA,IAAME,KAAKF,mBAAX;;AAEA,IAAIG,WAAJ;AACAC,QAAQC,SAAR,GAAoB,YAAM;AACxBH,KAAGI,aAAH,CAAoBC,QAAQC,GAAR,EAApB;AACA,MAAIC,kBAAJ;AACA,MAAIF,QAAQG,GAAR,CAAYC,QAAZ,WAAJ,EAAqC;AACnCF,gBAAYT,cAAcY,MAAd,EAAZ;AACD,GAFD,MAEO;AACLH,gBAAYF,QAAQC,GAAR,oBAAZ;AACD;AACDL,OAAKF,IAAOQ,SAAP,uBAAoC;AACvCI,aAASb,wCAD8B;AAEvCc,YAAQ;AACNC,iBAAW;AAAA,eAAO,yBAAeC,GAAf,CAAP;AAAA,OADL;AAENC,mBAAa;AAAA,eAAOC,KAAKC,KAAL,CAAWC,GAAX,CAAP;AAAA;AAFP;AAF+B,GAApC,CAAL;AAOAjB,KAAGkB,CAAH,CAAKC,KAAL,CAAWtB,oBAAX;;AAEAG,KAAGoB,QAAH,CAAY,EAAEC,MAAM,EAAR,EAAZ,EAA0BC,KAA1B;AACD,CAlBD;;AAoBArB,QAAQsB,GAAR,GAAc;AAAA,SACZ,IAAI3B,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIC,aAAJ;AACA,QAAI;AACFA,aAAO1B,GAAGuB,GAAH,SAAeI,OAAf,CAAuBC,GAAvB,EAA4BC,KAA5B,EAAP;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACD;;AAED,QAAIJ,IAAJ,EAAU;AACRF,cAAQE,KAAKG,KAAb;AACD,KAFD,MAEO;AACLL;AACD;AACF,GAbD,CADY;AAAA,CAAd;;AAgBAvB,QAAQ8B,GAAR,GAAc,UAACH,GAAD,EAAMC,KAAN;AAAA,SACZ,IAAIjC,OAAJ,CAAY,UAAC4B,OAAD,EAAUC,MAAV,EAAqB;AAC/BzB,OAAGuB,GAAH,SAAeS,MAAf,CAAsB,EAAEC,IAAIL,GAAN,EAAWC,YAAX,EAAtB,EAA0CP,KAA1C;AACAE;AACD,GAHD,CADY;AAAA,CAAd","file":"cache.js","sourcesContent":["const Promise = require(`bluebird`)\nconst low = require(`lowdb`)\nconst fs = require(`fs-extra`)\n\nlet db\nexports.initCache = () => {\n  fs.ensureDirSync(`${process.cwd()}/.cache/cache`)\n  let directory\n  if (process.env.NODE_ENV === `test`) {\n    directory = require(`os`).tmpdir()\n  } else {\n    directory = process.cwd() + `/.cache/cache`\n  }\n  db = low(`${directory}/site-cache.json`, {\n    storage: require(`lowdb/lib/storages/file-async`),\n    format: {\n      serialize: obj => JSON.stringify(obj),\n      deserialize: str => JSON.parse(str),\n    },\n  })\n  db._.mixin(require(`lodash-id`))\n\n  db.defaults({ keys: [] }).write()\n}\n\nexports.get = key =>\n  new Promise((resolve, reject) => {\n    let pair\n    try {\n      pair = db.get(`keys`).getById(key).value()\n    } catch (e) {\n      // ignore\n    }\n\n    if (pair) {\n      resolve(pair.value)\n    } else {\n      resolve()\n    }\n  })\n\nexports.set = (key, value) =>\n  new Promise((resolve, reject) => {\n    db.get(`keys`).upsert({ id: key, value }).write()\n    resolve(`Ok`)\n  })\n"]}