{"version":3,"sources":["../../../src/internal-plugins/query-runner/query-watcher.js"],"names":["_","require","chokidar","store","boundActionCreators","queryCompiler","default","queryRunner","invariant","normalize","exports","extractQueries","pages","getState","components","uniq","map","p","component","then","forEach","query","queries","get","replacePageComponentQuery","text","componentPath","runQueriesForComponent","getPagesForComponent","deletePagesDependencies","path","pageComponents","all","filter","watcher","watchComponent","add","watch","debounceCompile","debounce","rootDir","on"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;AAUA,IAAMA,IAAIC,iBAAV;AACA,IAAMC,WAAWD,mBAAjB;;eAEkBA,uB;IAAVE,K,YAAAA,K;;gBACwBF,8B;IAAxBG,mB,aAAAA,mB;;AACR,IAAMC,gBAAgBJ,4BAA4BK,OAAlD;AACA,IAAMC,cAAcN,yBAApB;AACA,IAAMO,YAAYP,oBAAlB;AACA,IAAMQ,YAAYR,yBAAlB;;AAEAS,QAAQC,cAAR,GAAyB,YAAM;AAC7B,MAAMC,QAAQT,MAAMU,QAAN,GAAiBD,KAA/B;AACA,MAAME,aAAad,EAAEe,IAAF,CAAOH,MAAMI,GAAN,CAAU;AAAA,WAAKC,EAAEC,SAAP;AAAA,GAAV,CAAP,CAAnB;AACA,SAAOb,gBAAgBc,IAAhB,CAAqB,mBAAW;AACrCL,eAAWM,OAAX,CAAmB,qBAAa;AAC9B,UAAMC,QAAQC,QAAQC,GAAR,CAAYd,UAAUS,SAAV,CAAZ,CAAd;;AAEAd,0BAAoBoB,yBAApB,CAA8C;AAC5CH,eAAOA,SAASA,MAAMI,IADsB;AAE5CC,uBAAeR;AAF6B,OAA9C;AAID,KAPD;;AASA;AACD,GAXM,CAAP;AAYD,CAfD;;AAiBA,IAAMS,yBAAyB,SAAzBA,sBAAyB,gBAAiB;AAC9C,MAAMf,QAAQgB,qBAAqBF,aAArB,CAAd;AACA;AACA;AACA;AACAtB,sBAAoByB,uBAApB,CAA4CjB,MAAMI,GAAN,CAAU;AAAA,WAAKC,EAAEa,IAAP;AAAA,GAAV,CAA5C;AACA,MAAMZ,YAAYf,MAAMU,QAAN,GAAiBkB,cAAjB,CAAgCL,aAAhC,CAAlB;AACA,SAAO,kBAAQM,GAAR,CAAYpB,MAAMI,GAAN,CAAU;AAAA,WAAKT,YAAYU,CAAZ,EAAeC,SAAf,CAAL;AAAA,GAAV,CAAZ,CAAP;AACD,CARD;;AAUA,IAAMU,uBAAuB,SAAvBA,oBAAuB;AAAA,SAC3BzB,MAAMU,QAAN,GAAiBD,KAAjB,CAAuBqB,MAAvB,CAA8B;AAAA,WAAKhB,EAAEC,SAAF,KAAgBQ,aAArB;AAAA,GAA9B,CAD2B;AAAA,CAA7B;;AAGA,IAAIQ,gBAAJ;AACAxB,QAAQyB,cAAR,GAAyB,yBAAiB;AACxCD,UAAQE,GAAR,CAAYV,aAAZ;AACD,CAFD;AAGAhB,QAAQ2B,KAAR,GAAgB,mBAAW;AACzB,MAAIH,OAAJ,EAAa;;AAEb,MAAMI,kBAAkBtC,EAAEuC,QAAF,CAAW,YAAM;AACvClC,oBAAgBc,IAAhB,CAAqB,mBAAW;AAC9B,UAAMP,QAAQT,MAAMU,QAAN,GAAiBkB,cAA/B;AACAT,cAAQF,OAAR,CAAgB,gBAAWU,IAAX,EAAoB;AAAA,YAAjBL,IAAiB,QAAjBA,IAAiB;;AAClCjB,kBACEI,MAAMkB,IAAN,CADF,YAEUA,IAFV,uCAEgD,yBAAelB,KAAf,CAFhD;;AAKA,YAAIa,SAASb,MAAMkB,IAAN,EAAYT,KAAzB,EAAgC;AAC9BjB,8BAAoBoB,yBAApB,CAA8C;AAC5CH,mBAAOI,IADqC;AAE5CC,2BAAeI;AAF6B,WAA9C;AAIAH,iCAAuBG,IAAvB;AACD;AACF,OAbD;AAcD,KAhBD;AAiBD,GAlBuB,EAkBrB,GAlBqB,CAAxB;;AAoBAI,YAAUhC,SACPmC,KADO,CACEG,OADF,gCAEPC,EAFO,WAEM,gBAAQ;AACpBH;AACD,GAJO,CAAV;AAKD,CA5BD","file":"query-watcher.js","sourcesContent":["/** *\n * Jobs of this module\n * - Maintain the list of components in the Redux store. So monitor new pages\n *   and add/remove components.\n * - Watch components for query changes and extract these and update the store.\n * - Ensure all page queries are run as part of bootstrap and report back when\n *   this is done\n * - Whenever a query changes, re-run all pages that rely on this query.\n ***/\n\nconst _ = require(`lodash`)\nconst chokidar = require(`chokidar`)\n\nconst { store } = require(`../../redux/`)\nconst { boundActionCreators } = require(`../../redux/actions`)\nconst queryCompiler = require(`./query-compiler`).default\nconst queryRunner = require(`./query-runner`)\nconst invariant = require(`invariant`)\nconst normalize = require(`normalize-path`)\n\nexports.extractQueries = () => {\n  const pages = store.getState().pages\n  const components = _.uniq(pages.map(p => p.component))\n  return queryCompiler().then(queries => {\n    components.forEach(component => {\n      const query = queries.get(normalize(component))\n\n      boundActionCreators.replacePageComponentQuery({\n        query: query && query.text,\n        componentPath: component,\n      })\n    })\n\n    return\n  })\n}\n\nconst runQueriesForComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deletePagesDependencies(pages.map(p => p.path))\n  const component = store.getState().pageComponents[componentPath]\n  return Promise.all(pages.map(p => queryRunner(p, component)))\n}\n\nconst getPagesForComponent = componentPath =>\n  store.getState().pages.filter(p => p.component === componentPath)\n\nlet watcher\nexports.watchComponent = componentPath => {\n  watcher.add(componentPath)\n}\nexports.watch = rootDir => {\n  if (watcher) return\n\n  const debounceCompile = _.debounce(() => {\n    queryCompiler().then(queries => {\n      const pages = store.getState().pageComponents\n      queries.forEach(({ text }, path) => {\n        invariant(\n          pages[path],\n          `Path ${path} not found in the store pages: ${JSON.stringify(pages)}`\n        )\n\n        if (text !== pages[path].query) {\n          boundActionCreators.replacePageComponentQuery({\n            query: text,\n            componentPath: path,\n          })\n          runQueriesForComponent(path)\n        }\n      })\n    })\n  }, 100)\n\n  watcher = chokidar\n    .watch(`${rootDir}/src/**/*.{js,jsx,ts,tsx}`)\n    .on(`change`, path => {\n      debounceCompile()\n    })\n}\n"]}