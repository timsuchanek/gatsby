{"version":3,"sources":["../../../src/internal-plugins/internal-data-bridge/gatsby-node.js"],"names":["crypto","require","moment","chokidar","systemPath","_","emitter","boundActionCreators","transformPackageJson","json","transformDeps","entries","deps","map","name","version","pick","dependencies","devDependencies","peerDependencies","optionalDependecies","bundledDependecies","exports","sourceNodes","store","createNode","state","getState","program","flattenedPlugins","page","path","id","createPageId","parent","children","internal","mediaType","type","content","contentDigest","createHash","update","digest","forEach","plugin","packageJson","resolve","buildTime","subtract","process","uptime","toJSON","createGatsbyConfigNode","config","configCopy","plugins","node","siteMetadata","port","host","pathToGatsbyConfig","join","directory","watch","on","cache","onCreatePage","deleteNode","action","payload"],"mappings":"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","file":"gatsby-node.js","sourcesContent":["const crypto = require(`crypto`)\nconst moment = require(`moment`)\nconst chokidar = require(`chokidar`)\nconst systemPath = require(`path`)\nconst _ = require(`lodash`)\n\nconst { emitter } = require(`../../redux`)\nconst { boundActionCreators } = require(`../../redux/actions`)\n\nfunction transformPackageJson(json) {\n  const transformDeps = deps =>\n    _.entries(deps).map(([name, version]) => {\n      return {\n        name,\n        version,\n      }\n    })\n\n  json = _.pick(json, [\n    `name`,\n    `description`,\n    `version`,\n    `main`,\n    `keywords`,\n    `author`,\n    `license`,\n    `dependencies`,\n    `devDependencies`,\n    `peerDependencies`,\n    `optionalDependecies`,\n    `bundledDependecies`,\n  ])\n  json.dependencies = transformDeps(json.dependencies)\n  json.devDependencies = transformDeps(json.devDependencies)\n  json.peerDependencies = transformDeps(json.peerDependencies)\n  json.optionalDependecies = transformDeps(json.optionalDependecies)\n  json.bundledDependecies = transformDeps(json.bundledDependecies)\n\n  return json\n}\n\nexports.sourceNodes = ({ boundActionCreators, store }) => {\n  const { createNode } = boundActionCreators\n  const state = store.getState()\n  const { program } = state\n  const { flattenedPlugins } = state\n\n  // Add our default development page since we know it's going to\n  // exist and we need a node to exist so it's query works :-)\n  const page = { path: `/dev-404-page/` }\n  createNode({\n    ...page,\n    id: createPageId(page.path),\n    parent: `SOURCE`,\n    children: [],\n    internal: {\n      mediaType: `application/json`,\n      type: `SitePage`,\n      content: JSON.stringify(page),\n      contentDigest: crypto\n        .createHash(`md5`)\n        .update(JSON.stringify(page))\n        .digest(`hex`),\n    },\n  })\n\n  flattenedPlugins.forEach(plugin =>\n    createNode({\n      ...plugin,\n      packageJson: transformPackageJson(\n        require(`${plugin.resolve}/package.json`)\n      ),\n      id: `Plugin ${plugin.name}`,\n      parent: `SOURCE`,\n      children: [],\n      internal: {\n        contentDigest: crypto\n          .createHash(`md5`)\n          .update(JSON.stringify(plugin))\n          .digest(`hex`),\n        mediaType: `application/json`,\n        content: JSON.stringify(plugin),\n        type: `SitePlugin`,\n      },\n    })\n  )\n\n  // Add site node.\n  const buildTime = moment().subtract(process.uptime(), `seconds`).toJSON()\n\n  const createGatsbyConfigNode = (config = {}) => {\n    // Delete plugins from the config as we add plugins above.\n    const configCopy = { ...config }\n    delete configCopy.plugins\n    const node = {\n      siteMetadata: {\n        ...configCopy.siteMetadata,\n      },\n      port: state.program.port,\n      host: state.program.host,\n      ...configCopy,\n      buildTime,\n    }\n    createNode({\n      ...node,\n      id: `Site`,\n      parent: `SOURCE`,\n      children: [],\n      internal: {\n        contentDigest: crypto\n          .createHash(`md5`)\n          .update(JSON.stringify(node))\n          .digest(`hex`),\n        content: JSON.stringify(node),\n        mediaType: `application/json`,\n        type: `Site`,\n      },\n    })\n  }\n\n  createGatsbyConfigNode(state.config)\n\n  const pathToGatsbyConfig = systemPath.join(\n    program.directory,\n    `gatsby-config.js`\n  )\n  chokidar.watch(pathToGatsbyConfig).on(`change`, () => {\n    // Delete require cache so we can reload the module.\n    delete require.cache[require.resolve(pathToGatsbyConfig)]\n    const config = require(pathToGatsbyConfig)\n    createGatsbyConfigNode(config)\n  })\n}\n\nconst createPageId = path => `SitePage ${path}`\n\nexports.onCreatePage = ({ page, boundActionCreators }) => {\n  const { createNode } = boundActionCreators\n\n  // Add page.\n  createNode({\n    ...page,\n    id: createPageId(page.path),\n    parent: `SOURCE`,\n    children: [],\n    internal: {\n      mediaType: `application/json`,\n      type: `SitePage`,\n      content: JSON.stringify(page),\n      contentDigest: crypto\n        .createHash(`md5`)\n        .update(JSON.stringify(page))\n        .digest(`hex`),\n    },\n  })\n}\n\n// Listen for DELETE_PAGE and delete page nodes.\nemitter.on(`DELETE_PAGE`, action => {\n  boundActionCreators.deleteNode(createPageId(action.payload.path))\n})\n"]}